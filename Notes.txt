Object-oriented software development includes six development activities:
requirements elicitation, analysis, system design, object design, implementation, and testing.

• Use case diagrams represent the functionality of the system from a user’s point of view. 
  They define the boundaries of the system.

• Class diagrams represent the static structure of a system in terms of objects, their attributes, operations, and relationships.

• Interaction diagrams represent the system’s behavior in terms of interactions among a set of objects. 
They are used to identify objects in the application and implementation domains.

• State machine diagrams represent the behavior of nontrivial objects.

• Activity diagrams are flow diagrams used to represent the data flow or the control flow through a system.

Stereotype - A stereotype is an extension mechanism that allows developers to classify model elements in UML.

Constraint - A constraint is a rule that is attached to a UML model element restricting its semantics.

Functional Model - Represented in UML with use case diagrams, describes the functionality of the system from the user’s point of view. 

Object model - Represented in UML with class diagrams, describes the structure of the system in terms of objects, attributes, associations, and operations. 
               During requirements and analysis, the object model starts as the analysis object model and describes the application concepts relevant to the system. 
               During system design, the object model is refined into the system design object model and includes descriptions of the subsystem interfaces. 
               During object design, the object model is refined into the object design model and includes detailed descriptions of solution objects. 

Dynamic model - Rpresented in UML with interaction diagrams, state machine diagrams, and activity diagrams, describes the internal behavior of the system. 
                Interaction diagrams describe behavior as a sequence of messages exchanged among a set of objects , whereas state machine diagrams describe behavior in terms of 
                states of an individual object and the possible transitions between states. 
                Activity diagrams describe behavior in terms control and data flows.